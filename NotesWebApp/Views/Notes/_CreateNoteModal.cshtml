@model NotesWebApp.Application.DTOs.CreateNoteRequest
<!-- Modal -->
<div class="modal fade" id="createNoteModal" tabindex="-1" aria-labelledby="createNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createNoteModalLabel">New Note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createNoteForm" method="post" novalidate>
                    <div class="mb-3 position-relative">
                        <label asp-for="Title" class="form-label">Title</label>
                        <input asp-for="Title" class="form-control" maxlength="200" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                        <small class="text-muted d-block text-end"><span id="titleRemaining">200</span> remaining</small>
                    </div>
                    <div class="mb-3 position-relative">
                        <label asp-for="Content" class="form-label">Content</label>
                        <textarea asp-for="Content" rows="4" class="form-control" maxlength="4000"></textarea>
                        <span asp-validation-for="Content" class="text-danger"></span>
                        <small class="text-muted d-block text-end"><span id="contentRemaining">4000</span> remaining</small>
                    </div>
                    <div class="mb-3 position-relative">
                        <label asp-for="Priority" class="form-label">Priority</label>
                        <select asp-for="Priority" class="form-select" id="prioritySelect">
                            <option value="1">Low</option>
                            <option value="5">Medium</option>
                            <option value="9">High</option>
                        </select>
                        <span asp-validation-for="Priority" class="text-danger"></span>
                    </div>
                    <div id="createErrors" class="text-danger small"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="createSubmitBtn" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>
<script>
(function () {
    const maxTitle =200, maxContent =4000;
    function update(input, span, max) { span.textContent = Math.max(0, max - input.value.length); }
    const titleInput = document.querySelector('#createNoteForm input[name="Title"]');
    const contentInput = document.querySelector('#createNoteForm textarea[name="Content"]');
    const titleSpan = document.getElementById('titleRemaining');
    const contentSpan = document.getElementById('contentRemaining');
    if (titleInput) { update(titleInput, titleSpan, maxTitle); titleInput.addEventListener('input', () => update(titleInput, titleSpan, maxTitle)); }
    if (contentInput) { update(contentInput, contentSpan, maxContent); contentInput.addEventListener('input', () => update(contentInput, contentSpan, maxContent)); }

    const submitBtn = document.getElementById('createSubmitBtn');
    const form = document.getElementById('createNoteForm');
    const errorDiv = document.getElementById('createErrors');
    submitBtn?.addEventListener('click', async () => {
        errorDiv.textContent = '';
        const payload = {
            title: form.querySelector('input[name="Title"]').value.trim(),
            content: form.querySelector('textarea[name="Content"]').value.trim(),
            priority: parseInt(form.querySelector('select[name="Priority"]').value,10)
        };
        try {
            const res = await fetch('/api/Notes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (res.ok) {
                const modalEl = document.getElementById('createNoteModal');
                const bsModal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                bsModal.hide();
                // simple approach: reload to show new note
                location.reload();
            } else if (res.status ===400) {
                const problem = await res.json();
                if (problem && problem.errors) {
                    errorDiv.innerHTML = Object.values(problem.errors).flat().join('<br />');
                } else {
                    errorDiv.textContent = problem.title || 'Validation failed.';
                }
            } else {
                errorDiv.textContent = 'Error: ' + res.status;
            }
        } catch (e) {
            errorDiv.textContent = 'Network error';
        }
    });
})();
</script>
